(define (prime n)
  (letrec ((primep (lambda (n primes)
		     (or (null? primes)
			 (and (not (zero? (remainder n (car primes))))
			      (primep n (cdr primes)))))))
    (let loop ((i 2) (candidate 2) (primes `()))
      (cond ((not (primep candidate primes)) (loop i (+ 1 candidate) primes))
	    ((= i n) candidate)
	    (#t (loop (+ 1 i) (+ 1 candidate) (cons candidate primes)))))))

(define (test)
  (let loop ((t0 (system:timestamp))
	(count 0))
    (prime 100)
    (if (<= (- (system:timestamp) t0) 15000)
	(loop t0 (+ count 1))
	(print (* 4 count) " iterations per minute"))))

(define (ctest)
  (let loop ((count 1))
    (prime 100)
    ;(format standard-output "%d" count)
    (print count)
    (loop (+ 1 count))))

(test)
